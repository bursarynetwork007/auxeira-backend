service: auxeira-backend

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  timeout: 30
  
  environment:
    NODE_ENV: ${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET}
    PAYSTACK_SECRET_KEY: ${env:PAYSTACK_SECRET_KEY}
    PAYSTACK_PUBLIC_KEY: ${env:PAYSTACK_PUBLIC_KEY}
    DATABASE_TABLE: ${self:custom.databaseTable}
    
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.databaseTable}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.databaseTable}/index/*"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource:
            - "arn:aws:s3:::auxeira-database/*"

custom:
  databaseTable: auxeira-${self:provider.stage}-startups
  
functions:
  api:
    handler: server.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: 
              - https://dashboard.auxeira.com
              - https://auxeira.com
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
      - http:
          path: /
          method: ANY
          cors:
            origin: 
              - https://dashboard.auxeira.com
              - https://auxeira.com
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true

  # Health check function
  health:
    handler: server.health
    events:
      - http:
          path: /health
          method: GET
          cors: true

  # Database seeder (run once)
  seedDatabase:
    handler: seed-database.handler
    timeout: 900  # 15 minutes for seeding
    memorySize: 3008
    events:
      - http:
          path: /admin/seed
          method: POST
          cors: true

resources:
  Resources:
    # DynamoDB Table for Startups
    StartupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.databaseTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: industry
            AttributeType: S
          - AttributeName: stage
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: IndustryIndex
            KeySchema:
              - AttributeName: industry
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: StageIndex
            KeySchema:
              - AttributeName: stage
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: auxeira-backend

    # S3 Bucket for Database Backup
    DatabaseBackupBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: auxeira-database-${self:provider.stage}
        VersioningConfiguration:
          Status: Enabled
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldBackups
              Status: Enabled
              ExpirationInDays: 30
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

    # API Gateway Custom Domain (optional)
    ApiGatewayDomainName:
      Type: AWS::ApiGateway::DomainName
      Condition: IsProduction
      Properties:
        DomainName: api.auxeira.com
        CertificateArn: arn:aws:acm:us-east-1:615608124862:certificate/79af196b-2665-413b-8402-dbc649920d75
        EndpointConfiguration:
          Types:
            - EDGE

    # API Gateway Base Path Mapping
    ApiGatewayBasePathMapping:
      Type: AWS::ApiGateway::BasePathMapping
      Condition: IsProduction
      DependsOn: ApiGatewayDomainName
      Properties:
        DomainName: api.auxeira.com
        RestApiId:
          Ref: ApiGatewayRestApi
        Stage: ${self:provider.stage}

  Conditions:
    IsProduction:
      Fn::Equals:
        - ${self:provider.stage}
        - prod

  Outputs:
    ApiUrl:
      Description: "API Gateway endpoint URL"
      Value:
        Fn::Join:
          - ''
          - - 'https://'
            - Ref: ApiGatewayRestApi
            - '.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}'
    
    DatabaseTableName:
      Description: "DynamoDB table name"
      Value: ${self:custom.databaseTable}
    
    DatabaseBackupBucket:
      Description: "S3 bucket for database backups"
      Value: auxeira-database-${self:provider.stage}

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

package:
  exclude:
    - node_modules/**
    - .git/**
    - .env
    - README.md
    - package-lock.json
  include:
    - server.js
    - database.json
    - generate-database.js
    - seed-database.js
    - package.json

